from google.colab import drive
drive.mount('/content/drive')

pip install py3Dmol

import py3Dmol

local_path = "/content/drive/MyDrive/Colab_Notebooks/StructuralBiologoy_JC"

%cd {local_path}

pdb_file_rsv = '/content/drive/MyDrive/Colab_Notebooks/JC-structural/resveratrolsirt1.pdb'
ligand_residue_rsv = 'RSV'  # Replace 'LIG' with the actual residue name of your ligand
active_residues_rsv = [202, 209, 211, 212, 215, 223, 414]

def parse_pdb_atoms(pdb_file_rsv):
    atoms = []
    with open(pdb_file_srt2104, 'r') as f:
        for line in f:
            if line.startswith('ATOM'):
                atom = {}
                atom['resi'] = int(line[22:26].strip())
                atom['resn'] = line[17:20].strip()
                atoms.append(atom)
    return atoms

def visualize_pdb_with_ligand(pdb_file_rsv, ligand_residue_rsv, active_residues_rsv):
    # Create the Py3Dmol viewer object
    viewer = py3Dmol.view(width=600, height=400)

    # Load the receptor PDB file
    viewer.addModel(open(pdb_file, 'r').read(), 'pdb')

    # Select ligand atoms
    viewer.setStyle({'resn': ligand_residue}, {'stick': {'colorscheme': 'greenCarbon'}})

    # Set the receptor visualization style
    viewer.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgrey'}})

    # Highlight active residues based on residue numbers
    viewer.setStyle({'resi': active_residues}, {'stick': {'colorscheme': 'lightgreyCarbon'}})

    # Add labels to ligand residue
    viewer.addLabel(f'{ligand_residue} ({ligand_residue})', {'fontColor': 'black', 'backgroundColor': 'white', 'fontSize': 10.5}, {'resn': ligand_residue})

    # Parse atom information from the PDB file
    atoms = parse_pdb_atoms(pdb_file)

    # Add labels to active residues
    for residue_num in active_residues:
        for atom in atoms:
            if atom['resi'] == residue_num:
                residue_name = atom['resn']
                viewer.addLabel(f'{residue_name} ({residue_num})', {'fontColor': 'black', 'backgroundColor': 'white', 'fontSize': 8.5}, {'resi': residue_num})
                break

    # Set the view to focus on the ligand
    viewer.zoomTo({'chain': 'A', 'resn': ligand_residue})

    # Display the viewer
    viewer.show()

visualize_pdb_with_ligand(pdb_file_rsv, ligand_residue_rsv, active_residues_rsv)


pdb_file_srt2104 = '/content/drive/MyDrive/Colab_Notebooks/JC-structural/srt2104sirt1.pdb'
ligand_residue_srt2104 = 'UNK'  # Replace 'LIG' with the actual residue name of your ligand
active_residues_srt2104 = [206, 223, 226, 294, 414]

def parse_pdb_atoms(pdb_file_srt2104):
    atoms = []
    with open(pdb_file, 'r') as f:
        for line in f:
            if line.startswith('ATOM'):
                atom = {}
                atom['resi'] = int(line[22:26].strip())
                atom['resn'] = line[17:20].strip()
                atoms.append(atom)
    return atoms

def visualize_pdb_with_ligand(pdb_file_srt2104, ligand_residue_srt2104, active_residues_srt2104):
    # Create the Py3Dmol viewer object
    viewer = py3Dmol.view(width=600, height=400)

    # Load the receptor PDB file
    viewer.addModel(open(pdb_file, 'r').read(), 'pdb')

    # Select ligand atoms
    viewer.setStyle({'resn': ligand_residue}, {'stick': {'colorscheme': 'skyblueCarbon'}})

    # Set the receptor visualization style
    viewer.setStyle({'chain': 'A'}, {'cartoon': {'color': 'lightgrey'}})

    # Highlight active residues based on residue numbers
    viewer.setStyle({'resi': active_residues}, {'stick': {'colorscheme': 'lightgreyCarbon'}})

    # Add labels to ligand residue
    viewer.addLabel(f'SRT2104', {'fontColor': 'black', 'backgroundColor': 'white', 'fontSize': 10.5}, {'resn': ligand_residue})

    # Parse atom information from the PDB file
    atoms = parse_pdb_atoms(pdb_file)

    # Add labels to active residues
    for residue_num in active_residues:
        for atom in atoms:
            if atom['resi'] == residue_num:
                residue_name = atom['resn']
                viewer.addLabel(f'{residue_name} ({residue_num})', {'fontColor': 'black', 'backgroundColor': 'white', 'fontSize': 8.5}, {'resi': residue_num})
                break

    # Set the view to focus on the ligand
    viewer.zoomTo({'chain': 'A', 'resn': ligand_residue})

    # Display the viewer
    viewer.show()

visualize_pdb_with_ligand(pdb_file_srt2104, ligand_residue_srt2104, active_residues_srt2104)
